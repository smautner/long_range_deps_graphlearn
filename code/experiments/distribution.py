from copy import deepcopy
from Valium import sumsim
#plan says this:
#dictribution adict  > res1
#res1 > draw distribution
# calc everything


def get_results(args):
    li = [ get_datapoint(size,args) for size in args['--sizes'] ]
    # transpose
    # get datapoints is giving back 3 points per size.  the transposition seperates the data again
    li =  [list(i) for i in zip(*li)]
    return li


import multiprocessing as mp

def runpool(size,args):
    pool = mp.Pool()
    rep = int(args['--repeats'])
    results = pool.map(evaluate_point, [[size,args]]*rep )
    pool.close()
    pool.join()
    return results

# calc for one "size", go over repeats
def get_datapoint(size,args):
    # res = runpool(size,args)
    res=[evaluate_point((size,args)) for i in range(args['--repeats']) ]
    a,b=utils.transpose(res)
    return a,b

def evaluate_point(size_args):
    size,args = size_args
    gen , train  = get_trainthings(size,args)
    print(gen)
    print(train)
    res = sumsim.get_dist_and_sim_crossval(gen,train,kfold=3)
    # print 'evaluate_point:', res
    return res

def test():
    a = [('', 'AAGAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGGCUAUCCAAGGUGCUUGAAAAUGUGGCAGGAAAAUGCAACUAAGUAGUCAAAC'), ('', 'AAGAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGGCUAUCCAAGGUGCUUGAAAAUGUGGCAGAAAUGCAACUAAGUAGUCAAAC'), ('', 'AAUAUAUAUCAUGAGAAGGAUUAAAUUCCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUAUGGCGUUCAGGAAAAUGGAGGUGUG'), ('', 'AAGAUAUAUCAUGAGAAGGAUUAAAUUCCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUAUGGCGUUCAGGAAAAUGGAGGUGUG'), ('', 'AAGAUAUAUCAAGAGAAGGAUUAAAUUCCUCUCCAACCUGCCACUCCGGCAAGGUGGAAAAAAGAUAUGGCGUUCAGGAAAAUGGAGGUGUG'), ('', 'GAGAAGCAUUUAGAGAAGGUUAAGACCUCGGCAACCUGGAUGGCUAUCCAAGGUGCUUGAAGAUGUGGCAGCAAUGCAACUAAGUAGUCAAAG'), ('', 'AUUAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGGCUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAGUAGUCAAAG'), ('', 'AAGAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGACUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAGUAGUCAAAG'), ('', 'AUUAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGACUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAGUAGUCAAAG'), ('', 'AAAAAGCAUCAAGAGCAGAGUUAAGUCUCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAGUGAUGCGGUUGUUCAACAAAUAAUGGAGAUAAA'), ('', 'AAAAAGCAUCAAGAGCAGAGUUAAGUCUCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAUGAUGCGGUUGUUCAACAAAUAAUGGAGAUAAA'), ('', 'UAAAUGCAUAGAGAACGCAAUGCGUAGCAACCUAGUUUAAGAACUAAGGUGCUUUUUGAUGUGGUGAUACAACAAAAAAUGGCGUUC'), ('', 'GUUUUGCAUAGAGAACGCAAUGCGUAGCAACCUAGUUUAAGAACUAAGGUGCUUUUUGAUGUGGUGAUACAACAAAAAAUGGCGUUC'), ('', 'GUUUUGCAUAGAGAAACGCAAUGCGUAGCAACCUAGUUUGGCUAACUAAGGUGCUUUUUGAUGUGGUGAUACAACAAAAAAUGGCGUUC'), ('', 'GUUUUGCAUAGAGAAACGCAAUGCGUAGCAACCUAGUUUGGCUAACUAAGGUGCUUUUUGAUGUGGUGAUACAACAAAAAAUGGCAAAA'), ('', 'AAGAUGCAUAGAGAAACGCAAUGCGUAGCAACCUAGUUGCCAACUAAGGUGCUUUUUGAUGUGGUGAUACAACAAAAAAUGGCAAAA'), ('', 'AAGAUGCAUAGAGAGAGGAAAUCCUCAGCAACCUAGUUGCCAACUAAGGUGCUUUUUGAUGUGGUGAUACAACAAAAAAUGGCAAAA'), ('', 'AAAGUUCAUCAAGAGUGAGAGAAAUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAUGAUGUGGUUAAUCAACAAAUAAUGGAGAUGCA'), ('', 'AAAGUUCAUCAAGAGUGAGAUUAAAUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAUGAUGUGGUUAAUCAACAAAUAAUGGAGAUGCA'), ('', 'UAUAAGCAUCAAGAGCGAGAUUAAAUUCUCCUCCAACCUGCCACUCCGGCAAGGUGGAAAAGUGAUGCGGUUAUUCAACAAUUAAAGGAGUAGAA'), ('', 'UAUAAGCAUCAAGAGCGAGAUUAAAUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUGCGGUUAUUCAACAAUUAAAGGAGUAGAA'), ('', 'GCGCUACAUCACGAACGCAAUGCGUGGCAACCGGGAAUCCACGGUGCCAAGUCACCUUAAACGUGACGAUGUGGCCCCGCAAGGGGCAACGGAUCGCAUGGCG'), ('', 'ACAAUGUAUUAAGAGUGAGAUUAAGUUCUCCUCCAACCUGCCACUCCGGCAAGGUGGAAAAGUGAUACGGUUUUUAUUAACAACAAAUGGAGGUUCA'), ('', 'ACAAUGUAUUAAGAGUGAGAUUAAAUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAGUGAUACGGUUUUUAUUAACAACAAAUGGAGGUUCA'), ('', 'ACAAUGUAUUAAGAGUGAGAUUAAAUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAUGAUACGGUUUUUAUUAACAACAAAUGGAGGUUCA'), ('', 'GUUUUGCAUCAAGAACGCAAUGCGUACCAACCGACACGCUCGUUGCACGGUGGUUUAGAAUGCGGGUAGCUCUACCAAACAAAUCGAGCUAA'), ('', 'GUUUUGCAUCAAGAACGCACUCCGCGUACCAACCGACACGCUCGUUGCACGGUGGUUUAGAAUGCGGGUAGGAAAAUACCAAACAAAUCGAGCUAA'), ('', 'GUUUUGCAUCAAGAACGCACUCCGCGUACCAACCGACACGCUCGUUGCACGGUGGUUUAGAAUGCGGGUAGAAAUACCAAACAAAUCGAGCUAA'), ('', 'GUUUUGCAUCAAGAGAGGAAAUCCUCACCAACCGACACGCUCGUUGCACGGUGGUUUAGAAUGCGGGUAGAAAUACCAAACAAAUCGAGCUAA'), ('', 'AAGAUGCAUAAAGAACGCAAAUGCGUAGCAACCUAGUUUAAGAACUAAGGUGCUUUUUGAUGUGGUUUUACAACAAAAAAUGGCGUUC'), ('', 'AAGAUGCAUAAAGAAGAGGAAAUCCUCAGCAACCUAGUUUAAGAACUAAGGUGCUUUUUGAUGUGGUUUUACAACAAAAAAUGGCGUUC'), ('', 'AAGAUGCAUAAAGAAGAGGAAAUCCUCAGCAACCUAGUUAAGUCUAAGGUGCUUUUUGAUGUGGUUUUACAACAAAAAAUGGCGUUC'), ('', 'ACUUUGCAUCAAGAGAGGAAAUCCUCACCAACCGACAUACUCGAUGCACGGUGGUUUAGAAUGCGGAGAGCAAUCUCAAAUUUUCGAGUAAUC'), ('', 'ACUUUGCAUCAAGAACGCCUUAAACGCGUACCAACCGACAUACUCGAUGCACGGUGGUUUAGAAUGCGGAGAGCAAUCUCAAAUUUUCGAGUAAUC'), ('', 'ACUUUGCAUCAAGAACGCCUUAAACGCGUACCAACCGACAUACUCGAUGCACGGUGGUUUAGAAUGCGGAGAGAAAUCUCAAAUUUUCGAGUAAUC'), ('', 'ACUUUGCAUCAAGAGAGGAAAUCCUCACCAACCGACAUACUCGAUGCACGGUGGUUUAGAAUGCGGAGAGAAAUCUCAAAUUUUCGAGUAAUC'), ('', 'AAGAUACAUCAAGAGCAGGAUUAAGUUCCUCUCCAACCUGCCAAUGGCAAGGUGGAAAAAAGAUGUGGUUAACCAACAAUUAAAGGAGUUAAA'), ('', 'AAGAUACAUCAAGAGCAGGAUUAAGUUCCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUGUGGUUAACCAACAAUUAAAGGAGUUAAA'), ('', 'AAGAUACAUCAAGAGCAGGAUUAAAUUCCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUGUGGUUAACCAACAAUUAAAGGAGUUAAA'), ('', 'GUUUUCAUCAAGAGUGAGAUUAGGUUCUCCUCCAACCUGCCAAUGGCAAGGUGGAAAAAAGAUGAGGUUAAUCAACAAGUAUAGGAGUGUUA'), ('', 'AAGAUCAUCAAGAGUGAGAUUAGGUUCUCCUCCAACCUGCCAAUGGCAAGGUGGAAAAAAGAUGAGGUUAAUCAACAAGUAUAGGAGUGUUA'), ('', 'AAGAUCAUCAAGAGUGAGAUUAGGUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUGAGGUUAAUCAACAAGUAUAGGAGUGUUA'), ('', 'AAGAUCAUCAAGAGUGAGAUUAAAUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUGAGGUUAAUCAACAAGUAUAGGAGUGUUA'), ('', 'UCCCAGCAUCCAGAGAGGCCAAUGGCCUCGCCAACCUGCUGCCAGCAAGGUGGCAUCCCGAUCAAGGGAGAUGCGGCCCGACAGGGCAACGAAAGGAGAUCC'), ('', 'UCCCAGCAUCCAGAGAGGAAAUCCUCGCCAACCUGCUGCCAGCAAGGUGGCAUCCCGAUCAAGGGAGAUGCGGCCCGACAGGGCAACGAAAGGAGAUCC'), ('', 'UCCCAGCAUCCAGAGAGGAAAUCCUCGCCAACCUGCUGACUAGCAAGGUGGCAUCCCGAUCAAGGGAGAUGCGGCCCGACAGGGCAACGAAAGGAGAUCC'), ('', 'AUAGUACAUCAGGAGUGGUUUCAGAAAUGAAACCCGCCAACCGAACCCAGAUAAAUCAAGGUUACGGUGGUUUGAUCACUCCGGUAGAUGUGCCCAGAAAUGGGAAACAUGAUUAGCCGC'), ('', 'AUAGUACAUCAGGAGUGGUUUCAGAAAUGAAACCCGCCAACCGAACCCAGAUAAAUCAAGGUUACGGUGGUUUGAUCAACUCCGGUAGAUGUGCCCAGCAAUGGGAAACAUGAUUAGCCGC'), ('', 'UGAGUGCAUAUAGAGAGGAAAUCCUCAGCAACCUAGUUUGACUAACUAAGGUGCUUUUUGAUGUGGUUAUACAACAAAAAAUGGCGUUC'), ('', 'UGAGUGCAUAUAGAGAGGAAAUCCUCAGCAACCUAGUUGCCAACUAAGGUGCUUUUUGAUGUGGUUAUACAACAAAAAAUGGCGUUC'), ('', 'UGAGUGCAUAGAGAGAGGAAAUCCUCAGCAACCUAGUUGCCAACUAAGGUGCUUUUUGAUGUGGUUAUACAACAAAAAAUGGCGUUC')]
    b = [('AACY020047005.1/1120-1212', 'GAGGAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGACUAUCCAAGGUGCUUGAAAAUGUGGCAGCAAUGCAACUAAGUAGUCAAAC'), ('AACY020375700.1/1515-1609', 'AAUAUAUAUCAUGAGAAGGAUUUAUUUCCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUAUGGCGUUCAGCAAAUAAUGGAGGUGUG'), ('AACY020340651.1/1065-973', 'GAGAAGCAUUUAGAGAAGGUUAAGACCUCGGCAACCUGGAUGACUAUCCAAGGUGCUUGAAGAUGUGGCAGCAAUGCAACUAAGUAGUCAAAG'), ('AACY023113558.1/484-580', 'AAAAAGCAUCAAGAGCAGAGUUAAGUCUCUCUCCAACCUGCCAACUCCGGCAAGGUGGAACAAAUGAUGCGGUUGUUCAACAAAUAAUGGAGAUAAA'), ('AACY020548058.1/648-734', 'UAAAUGCAUAGAGAGAGGAAAUCCUCAGCAACCUAGUUGCCAACUAAGGUGCUUUUUGAUGUGGUGAUACAACAAAAAAUGGCGUUC'), ('AACY020929092.1/724-820', 'AAAGUUCAUCAAGAGUGAGAUUAAGUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAUGAUGUGGUUAAUCAACAAAUAAUGGAGAUGCA'), ('AACY023621099.1/135-40', 'UAUAAGCAUCAAGAGCGAGAUUAAUUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAGUGAUGCGGUUAUUCAACAAUUAAAGGAGUAGAA'), ('AACY020167686.1/1628-1731', 'GCGCUACAUCACGAGCGACCAUACGGUCCGGCAACCGGGAAUCCACGGUGCCAAGUCACUUCGGUGACGAUGUGGCCCCGCAAGGGGCAACGGAUCGCAUGGCG'), ('AACY021231107.1/205-108', 'ACAAUGUAUUAAGAGUGAGAUUAAGUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAUGAUACGGUUUUUAUUAACAACAAAUGGAGGUUCA'), ('AACY020475741.1/547-639', 'GUUUUGCAUCAAGAACGCUAAUGCGUACCAACCGACACGCUCGUUGCACGGUGGUUUAGAAUGCGGGUAGCUCUACCAAACAAAUCGAGCUAA'), ('AACY020225991.1/1900-1814', 'UUAUUGCAUAGAGAGAGGGAUACCUCAGCAACCUAGUUGCCAACUAAGGUGCUUUUUGAUGUGGUUUUACAACAAAAAAUGGCGUUC'), ('AACY023374497.1/754-846', 'ACUUUGCAUCAAGAACGCAAUGCGUACCAACCGACAUACUCGAUGCACGGUGGUUUAGAAUGCGGAGAAUAACUCUCAAAUUUUCGAGUAAUC'), ('AACY020099425.1/760-666', 'AAGAUACAUCAAGAGCAGGAUUAAGUUCCUCUCCAACCUGCCACUCCGGCAAGGUGGAAAAAAGAUGUGGUUAACCAACAAUUAAAGGAGUUAAA'), ('AACY023398704.1/1264-1169', 'AAAAAUCAUCAAGAGUGAGAUUAGGUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAGAUGAGGUUAAUCAACAAGUAUAGGAGUGUUA'), ('AACY023767351.1/867-762', 'UCCCAGCAUCCAGAGAGGCCAUGGUGGCCUCGCCAACCUGCUCCUCCAGCAAGGUGGCAUCCCGAUCAAGGGAGAUGCGGCCCGACAGGGCAACGAAAGGAGAUCC'), ('AACY022859046.1/406-504', 'GCAAUACAUCAUGAGUGAAUAAGAAAUUAUUCCGCCAACCUGCUUGAGGAAGUAAGGUGGCAGAGAAUGUGGUCUUAAUUGACAAUUAGGUUCCUCGUU'), ('AACY022288712.1/729-852', 'AUAGUACAUCAGGAGUGGUUUCAGUAUUGAAACCCGCCAACCGAACCCAGAUAAAUCAAGGUUACGGUGGUUUGAUCCUUAAACGGUAGAUGUGCCCAGGAAGAUGGGAAACAUGAUUAGCCGC'), ('AACY024112069.1/477-563', 'UGAGUGCAUAUAGAGAGGAAUACCUCAGCAACCUAGUUGCCAACUAAGGUGCUUUUUGAUGUGGUUAUACAACAAAAAAUGGCGUUC'), ('AACY020374006.1/456-551', 'AUCGAACAUCAAGAGUGAGAUUAAGUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAGUGAUGUGGUUAAUCAACAAAUAAAGGAGAAAAA'), ('AACY020498997.1/2371-2463', 'AUUAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAAGGCUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAUUAGUCAAAA'), ('AACY020347367.1/1189-1095', 'UACAGAUAUCAAGAGCAGGAUUAAAUUCCUCUCCAACCUGCCCUCUCUGGCAAGGUGGAAAAAUGAUAUGGCUUUCAGCAACUAAAGGAGGAAAA'), ('AACY023449668.1/862-748', 'AAUUAUCAUCAGGAGUGAUCUUUAAGUAAAGAUCCACCAACCGAGCCUAAAAGCUACGGUGGUUAGUUCCAUUAAACGGAGGAUGUGCCUUGAAAAAGGAAAAAGUGGAACCGCC'), ('AACY020136271.1/828-741', 'GGUUUGCAUAAAGAGAGGGAAUCCUCAGCAACCUAGAUUACCAAUUAAGGUGCUUUUUGAUGUGGUUUAACGACAAAAAAUGGUAUUU'), ('AACY022849402.1/732-640', 'AAGAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGACUAUCCAAGGUGCUUGAAGAUGUGGCAGCAAUGCAACUAAGUAGUCAAAC'), ('AACY020145665.1/933-841', 'ACUAGACAUAAAGAGAAGGUUAAGACCUCAGCAACCUGGAUGGCUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAAUAGUCAAAA'), ('AACY023738170.1/418-505', 'GUUUUGCAUAAAGAGAGGAAAUCCUCAGCAACCUAGAUACCAACUAAGGUGCUAUUUGAUGUGGUUUUACAACAAAAAAUGGUAUUUC'), ('AACY020554743.1/6070-6188', 'UAAAGGUAUGAGGAUUGCCUCACUAACCCCAAGGUGAGGCUGCCAACCGAGCACGUGCCACGGUGGCCGAAUCUUAAUGAGAUUCCAUAUGUUGGAUUAACCAAAAAAGGAGCCCUAUG'), ('AACY020477924.1/1643-1551', 'UAGGAACAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAAGACUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAGUAGUCAAAU'), ('AACY020243063.1/177-88', 'GUUUUGCAUAAAGAGAGGGAAGCCUCAGCAACCUAGAUUGCCAACUAAGGUGCUUUUUGAUGUGGUUAUUACAACAAAAAAUGGCUUUUU'), ('AACY020553512.1/101-193', 'AUUAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGGCUAUCCAAGGUGCUAGAAAAUGUGGCAGAAAUGCAACUAAAUAGUCAAAU'), ('AACY020270417.1/535-630', 'GACAUGCAUCAAGAGUAGAGUUAAGUCUCUCUCCAACCUGCCACUCCGGCAAGGUGGAAAAAAAGAUGUGGUUAACCAACAAAUAAUGGAGUUAAA'), ('AACY021228520.1/864-751', 'UGAUAACAUCAGGAGAGAUUUCUAAGUAGAAAUCCACCAACCGAGCUAAAAGCUACGGUGGUUAGUUCCAUUAAACGGAGGAUGUGCCUUGAAAAAGGAAAAAGUGGAACCGCC'), ('AACY020327880.1/953-857', 'AUAGAGCAUUAAGAGCAGGGUUAAAUCCCUCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAUGAUGCGGUUAACCAACAAACAUAGGAGUACAA'), ('AANA01000001.1/1651504-1651599', 'UGGCAGUAUCAGGAACGCAAGAAUUGCGUACCAACCGAGCAAAAAAGCUACGGUGGUUUAGUAUACGGACAGUUCUGUCAAAAUAAAUGAACAUCC'), ('AACY024079331.1/447-570', 'AGUUAACAUCAGGAGUGGUUUCGUAGUUGAAACCCGCCAACCGAGCCCAGAUAAAUCAUGGUCACGGUGGUUAGAGCCUUAAACGCUAGAUGUGCCUAGGAAAAUAGGAAACAUAAAGCCGCCU'), ('AACY020181329.1/1342-1222', 'AUCCUGUAUGUAGAGUGCCUCUCGAUAGGGGCCACCAAACCGAGCAACUCCACAAGUAGCCACGGUGGUUAGAAUCGCAAGAUUCCAUAUGUAGGAGACAACCUAAAAAAUGGAGGUGCCC'), ('AACY021211837.1/282-374', 'UCUAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGACUAUCCAAGGUGCUUGGAAAUGUGGCAGAAAUGCAACUAAAUAGUCAAAA'), ('AACY020430580.1/2307-2395', 'AAAAUGCAUGGAGAGAGGACAAAUCCUCAGCAACCUAGAGAGCUAACUAAGGUGCUUAAAUAUGUGGUUUAUAACAAAAAAUAGCUUUC'), ('AACY023367397.1/199-322', 'AAUCAUCAUCAGGAGUGGUUUCAUGAUUGAAACCCGCCAACCGAGCCUAGAUAAAUCAAGGUCGCGGUGGUUAGAGCCUUAAACGCUAGAUGUGCCCAGGAAAAUGGGAAACAUGAUUAGCCGC'), ('AACY023366624.1/990-898', 'ACAGUGCAUCAAGAACGCAAUGCGUACCAACCGACACACUCGAUGCACGGUGGUUUAGAAUGCGGAGAACAACUCUCAAAUUAAUCGAGUAAU'), ('AACY023505660.1/626-720', 'AAGAUACAUCAAGAGUGAGAUUAAGUUCUCCUCCAACCUGCCACUCCGGCAAGGUGGAAAAAAGAUGUGGUUAACCAACAAUUAAAGGAGUUAAA'), ('AACY023296326.1/566-470', 'AGGAUUCAUCAAGAGUGAGAUUAGAUUCUCCUCCAACCUGCCAACUCCGGCAAGGUGGAAAAAAUGAUGUGGUUAAUCAACAACUAAAGGAGUUAUA'), ('CP000873.1/467570-467678', 'ACCGCACAUCCAGAGUUGGGGCGACGCCCAACGCCAACCUGCCGUUCCGGGCAAGGUGGUACUCCCCGAAAGGGAGGAUGUGGCCGAACCGGCAAUUAUACGGAUGAAG'), ('AACY020086339.1/1639-1731', 'AGUAGACAUAAAGAGAAGGUUAAGACCUCAGCAACCUGGAUGACUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAAUAGUCAAAA'), ('AACY022869497.1/434-342', 'UUGAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGGCUAUCCAAGGUGCUAGAAAAUGUGGCAGAAAUGCAACUAAGUAGUCAAAA'), ('AACY020492046.1/1757-1849', 'AAGAAGCAUAAAGAGAAGGUUAAGACCUCGGCAACCUGGAUGACUAUCCAAGGUGCUUGAAGAUGUGGCAGAAAUGCAACUAAGUAGUCAAAC'), ('AAOA01000016.1/47143-47251', 'CGACUGCAUCAAGAGGGGCAUAGCCCCACCAACCGCCCACUCCGGGAACGGUGGUCCAAAUGAUGCGCCAAUGGCUCUGCAUUGCAGACAUGGAACAUAAAGGAGACCU'), ('AACY023872706.1/1205-1109', 'AUUUUACAUCUAUAGAGAAGGGUGACCUUCACCAACCAGCCAGACUUGGCAACGGUGGUUCAACGAUGUGGCUUUUGAAGCAACAAUAAAGUCAGAU'), ('AACY022059262.1/134-223', 'AAAAAGCAUCAAGAACGCGAAUGCGUACCAACCGACAGCUCGUUGCACGGUGGUUUAGAAUGCGGGGGUCCUCCCAAAUUAACGAGAAAU'), ('AACY020838872.1/555-460', 'UUAAUGUAUCAAGAGAAGGAUUAAAUUCCUCUCCAACCUGCCAACUCCGGUAAGGUGGAAAAAAGAUGCGGUUAACCAACAAUUAAAGGAGUUAAA')]
    clean = lambda x: [b for a,b in x]
    a = clean(a)
    b = clean(b)
    print(sumsim.get_dist_and_sim_crossval(a,b,3))

# does the fit stuff
def get_trainthings(size,args,depth=0):
    if depth==6:
        exit()

    # # 2024 block
    train,test = utils.get_seq_tups(args['--fasta'],size,1)
    generated=utils.fit_sample(deepcopy(train),args,args['--njobs'])
    return generated,train

    # try:
    #     train,test = utils.get_seq_tups(args['--fasta'],size,1)
    #     res=utils.fit_sample(deepcopy(train),args,args['--njobs'])
    #     if len(res)<10:
    #         raise ValueError('wtf')

    # except Exception as excpt:
    #     if args['--debug']:
    #         print excpt
    #         print '.',
    #     return get_trainthings(size,args,depth+1)
    # return (res,train)


import sys
import getopt
import utils
if __name__ == "__main__":

    # PARSE THE ARGS:
    optlist, args = getopt.getopt(sys.argv[1:], '', ['fasta=', 'sizes=', 'repeats=','njobs=','debug='])
    optlist=dict(optlist)
    # defaults={'--fasta':'RF01725.fa','--sizes':"[10,20,50,100,200,400]",
    # defaults={'--fasta':'RF01725.fa','--sizes':"[25,50,75,100]",
    defaults={'--fasta':'RF01725.fa','--sizes':"[50]",
              '--njobs':'1','--repeats': '5','--debug':'False'}

    for k,v in defaults.items():
        if k not in optlist:
            optlist[k]=v

    for k in ['--sizes','--repeats','--njobs', '--debug']:
        optlist[k] = eval(optlist[k])

    #{'fastafile': 'RF01725.fa', 'mininterfacecount': 2, 'burnin': 4, 'acc_min_sim': 0.24449402485485644, 'imp_lin_start': 0.19892265815047983, 'maxsizediff': 6,
    #'imp_thresh': 0.32120431812249317, 'mincipcount': 2, 'SCORE': -0.0, 'core_choice': False, 'n_samples': 10, 'n_steps': 25, 'quick_skip': True}

    # go over each line of input and start dropping picz
    for nth, line in enumerate(sys.stdin.readlines()):
        if line.strip():
            inputdict=eval(line)
            inputdict.update(optlist)
            r=  get_results(inputdict)
            print( optlist['--sizes'],",",r[0],',',r[1])




