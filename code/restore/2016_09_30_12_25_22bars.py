nb='CiMgY29kaW5nOiB1dGYtOAoKIyBJblsxM106CgppbXBvcnQgc3VicHJvY2VzcyBhcyBzYgppbXBvcnQgdGltZQojcHJpbnQgc2IuY2hlY2tfb3V0cHV0KFsibHMgLWwiXSkKCnRpbWUuc3RyZnRpbWUoIiVZXyVtXyVkXyVIXyVNXyVTIikKZ2V0X2lweXRob24oKS5tYWdpYyh1J2xvYWRfZXh0IGF1dG9yZWxvYWQnKQpnZXRfaXB5dGhvbigpLm1hZ2ljKHUnYXV0b3JlbG9hZCAyJykKCnByaW50IHNiLmNoZWNrX291dHB1dCgnY2QgL2hvbWUgO2xzICcsc2hlbGw9VHJ1ZSkgCgoKIyBJblsgXToKCgoKCiMgSW5bMTRdOgoKCgppbXBvcnQgZHVtcApkdW1wLmR1bXAobmI9J2JhcnMuaXB5bmInLGdpdD1bJ2dyYXBobGVhcm4nLCdlZGVuJ10sc2F2ZWRpcj0nLi4vcmVzdG9yZScpCgoKCgojIEluWzNdOgoKZnJvbSBlZGVuLnV0aWwgaW1wb3J0IGNvbmZpZ3VyZV9sb2dnaW5nCmltcG9ydCBsb2dnaW5nCmNvbmZpZ3VyZV9sb2dnaW5nKGxvZ2dpbmcuZ2V0TG9nZ2VyKCksdmVyYm9zaXR5PTEpCmdldF9pcHl0aG9uKCkubWFnaWModSdtYXRwbG90bGliIGlubGluZScpCmdldF9pcHl0aG9uKCkuc3lzdGVtKHUncHdkJykKCiMgZGVidWcgZm9yIHNlcHQgMTYuLiAKREVCVVJHPSBUcnVlCgoKIyBJbls0XToKCicnJwpHRVQgUk5BIERBVEEKJycnCmZyb20gZWRlbi5jb252ZXJ0ZXIuZmFzdGEgaW1wb3J0IGZhc3RhX3RvX3NlcXVlbmNlCmltcG9ydCBpdGVydG9vbHMKZnJvbSBlZGVuLnV0aWwgaW1wb3J0IHJhbmRvbV9iaXBhcnRpdGlvbl9pdGVyLHNlbGVjdGlvbl9pdGVyYXRvcgppbXBvcnQgcmFuZG9tCgpkZWYgcmZhbV91cmkoZmFtaWx5X2lkKToKICAgIHJldHVybiAnaHR0cDovL3JmYW0ueGZhbS5vcmcvZmFtaWx5LyVzL2FsaWdubWVudD9hY2M9JXMmZm9ybWF0PWZhc3RhdSZkb3dubG9hZD0wJyUoZmFtaWx5X2lkLGZhbWlseV9pZCkKZGVmIHJmYW1fdXJpKGZhbWlseV9pZCk6CiAgICByZXR1cm4gJyVzLmZhJyUoZmFtaWx5X2lkKQoKICAgIAogICAgClJGQU09IlJGMDE3MjUiCiNjdXRvZmYgMTYyICg0NC4wKQojY3V0b2ZmIDE3MjUgKDM4LjApCiNjdXRvZmYgcmVzdCAoMjkpCgoKZGVmIGdldF9zZXF1ZW5jZXMoc2l6ZT05OTk5LHJhbmQ9RmFsc2UpOgogICAgc2VxdWVuY2VzID0gZ2V0X3NlcXVlbmNlc193aXRoX25hbWVzKHNpemU9c2l6ZSxyYW5kPXJhbmQpCiAgICByZXR1cm4gWyBiIGZvciAoYSxiKSBpbiBzZXF1ZW5jZXMgXQoKZGVmIGdldF9zZXF1ZW5jZXNfd2l0aF9uYW1lcyhzaXplPTk5OTksIHJhbmQ9MCk6CiAgICBpdCA9IGZhc3RhX3RvX3NlcXVlbmNlKCIuLi90b29sc2RhdGEvJXMuZmEiICUgUkZBTSkKICAgIGl0ID0gbGlzdChpdCkKICAgIGlmIHJhbmQ+MDoKICAgICAgICAjc2VxdWVuY2VzICwgYm9yaW5nID0gcmFuZG9tX2JpcGFydGl0aW9uX2l0ZXIoaXQsLjkscmFuZG9tX3N0YXRlPXJhbmRvbS5yYW5kb20oKSkKICAgICAgICByPXJhbmdlKGxlbihpdCkpCiAgICAgICAgcmFuZG9tLnNodWZmbGUocikKICAgICAgICByZXR1cm4gc2VsZWN0aW9uX2l0ZXJhdG9yKGl0LHJbOnNpemVdKQogICAgICAgICNzZXF1ZW5jZXMgPSBpdGVydG9vbHMuaXNsaWNlKCBzZXF1ZW5jZXMgLCBzaXplKQogICAgZWxzZToKICAgICAgICBzZXF1ZW5jZXMgPSBpdGVydG9vbHMuaXNsaWNlKGl0LCBzaXplKQogICAgcmV0dXJuIHNlcXVlbmNlcwoKCgoKIyBJbls1XToKCmltcG9ydCBncmFwaGxlYXJuCmdyYXBobGVhcm4uX19maWxlX18KCgojIEluWyBdOgoKCgoKIyBJbls2XToKCmltcG9ydCByYW5kb20KaW1wb3J0IGdyYXBobGVhcm4uYWJzdHJhY3RfZ3JhcGhzLlJOQSBhcyBybmEKZnJvbSAgZ3JhcGhsZWFybi5mZWFzaWJpbGl0eSBpbXBvcnQgRmVhc2liaWxpdHlDaGVja2VyIGFzIENoZWNrZXIKZnJvbSBncmFwaGxlYXJuLmVzdGltYXRvciBpbXBvcnQgV3JhcHBlciBhcyBlc3RpbWF0b3J3cmFwcGVyCmltcG9ydCBncmFwaGxlYXJuLnV0aWxzLmRyYXcgYXMgZHJhdwpmcm9tIGdyYXBobGVhcm4uZ3JhcGhsZWFybiBpbXBvcnQgU2FtcGxlciBhcyBHTFMKaW1wb3J0IGl0ZXJ0b29scwoKCgpkZWYgZml0X3NhbXBsZShncmFwaHMsIHJhbmRvbV9zdGF0ZT1yYW5kb20ucmFuZG9tKCkpOgogICAgJycnCiAgICBncmFwaHMgLT4gbW9yZSBncmFwaHMKICAgIAogICAgZ3JhcGhzIGFyZSBwcmV0dHkgbWljaCAoTkFNRSxTRVFVRU5DRSksKCkuLi4KICAgICcnJwogICAgCiAgICAjIGZpdCBhIHNhbXBsZXIKICAgIGdyYXBocyA9IGxpc3QoZ3JhcGhzKQogICAgZXN0aW1hdG9yPWVzdGltYXRvcndyYXBwZXIoIG51PS41LCBjdj0yLCBuX2pvYnM9LTEpICMgd2l0aCAuNSBpdCBhbHNvIHdvcmtzIGZvciB0aGUgZmV3ZXIgb25lcy4uIAogICAgc2FtcGxlcj1ybmEuQWJzdHJhY3RTYW1wbGVyKHJhZGl1c19saXN0PVswXSwgIyB3YXIgMCwxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpY2tuZXNzX2xpc3Q9WzJdLCAjIHdhciAyIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9jaXBfY291bnQ9MSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluX2ludGVyZmFjZV9jb3VudD0yLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwcm9jZXNzb3I9cm5hLlByZVByb2Nlc3NvcihiYXNlX3RoaWNrbmVzc19saXN0PVsxXSxpZ25vcmVfaW5zZXJ0cz1UcnVlKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdHByb2Nlc3Nvcj1ybmEuUG9zdFByb2Nlc3NvcigpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRvcj1lc3RpbWF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZmVhc2liaWxpdHlfY2hlY2tlcj1mZWFzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgc2FtcGxlci5maXQoZ3JhcGhzLGdyYW1tYXJfbl9qb2JzPTQsZ3JhbW1hcl9iYXRjaF9zaXplPTEpCiAgICAgICAgCiAgICAjbG9nZ2VyLmluZm8oJ2dyYXBoIGdyYW1tYXIgc3RhdHM6JykKICAgIGRhdGFzZXRfc2l6ZSwgaW50ZXJmYWNlX2NvdW50cywgY29yZV9jb3VudHMsIGNpcF9jb3VudHMgPSBzYW1wbGVyLmdyYW1tYXIoKS5zaXplKCkKICAgICNsb2dnZXIuaW5mbygnI2luc3RhbmNlczolZCAgICNpbnRlcmZhY2VzOiAlZCAgICNjb3JlczogJWQgICAjY29yZS1pbnRlcmZhY2UtcGFpcnM6ICVkJyAlIChkYXRhc2V0X3NpemUsIGludGVyZmFjZV9jb3VudHMsIGNvcmVfY291bnRzLCBjaXBfY291bnRzKSkKICAgIAogICAgZ3JhcGhzID0gWyBiIGZvciBhICxiIGluIGdyYXBocyAgXQogICAgZ3JhcGhzID0gc2FtcGxlci5zYW1wbGUoZ3JhcGhzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbl9zYW1wbGVzPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXRjaF9zaXplPTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuX3N0ZXBzPTUwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbl9qb2JzPTQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWlja19za2lwX29yaWdfY2lwPVRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9iYWJpbGlzdGljX2NvcmVfY2hvaWNlPVRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXJuaW49MTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXByb3ZpbmdfdGhyZXNob2xkPTAuOSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcHJvdmluZ19saW5lYXJfc3RhcnQ9MC4zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4X3NpemVfZGlmZj0yMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdF9taW5fc2ltaWxhcml0eT0wLjY1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X2NpcF9tYXhfdHJpZXM9MzAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZWVwX2R1cGxpY2F0ZXM9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlX3NlZWQ9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrdHJhY2s9MTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb25pdG9yPUZhbHNlKQogICAgCiAgICByZXN1bHQ9W10KICAgIGZvciBncmFwaGxpc3QgaW4gZ3JhcGhzOgogICAgICAgIHJlc3VsdCs9Z3JhcGhsaXN0CiAgICAKICAgICNwcmludCAnb25lIHJvdW5kIGRvbmU6KSAnCiAgICAjZHJhdy5ncmFwaGxlYXJuKHJlc3VsdCkKICAgIAogICAgIyBub3RlIHRoYXQgdGhpcyBpcyBhIGxpc3QgWygnJyxzZXF1KSwuLl0KICAgIHIyPVtdCiAgICBmb3IgciBpbiByZXN1bHQ6CiAgICAgICAgI3ByaW50IHIKICAgICAgICAjcjIuYXBwZW5kKHJuYS5nZXRfc2VxdWVuY2UocikpCiAgICAgICAgcjIuYXBwZW5kKHJbMV0pCiAgICAKICAgICNwcmludCAnZ3JnZW4gcmVzdWx0IGlzIHJhYnVuIG5vdCB3YXMgaXMgZG9jdW1lbnRlZE9vLicscjIKICAgIHJldHVybiByMgoKCiMgSW5bN106CgppbXBvcnQgbnVtcHkgYXMgbnAKZGVmIGV2YWwocmVwZWF0cyxzaXplKToKICAgIG1lYW5zPVtdCiAgICBzdGRzPVtdCiAgICBmb3IgaSBpbiByYW5nZShyZXBlYXRzKToKICAgICAgICAKICAgICAgICBncmFwaHM9Z2V0X3NlcXVlbmNlc193aXRoX25hbWVzKHNpemU9c2l6ZSwgcmFuZD0xMCkKICAgICAgICB6ej1maXRfc2FtcGxlKGdyYXBocykKICAgICAgICAjcHJpbnQgenpbOjNdCiAgICAgICAgIyB6PVtiIGZvciBhICxiIGluIHp6XQogICAgICAgIHJlc3VsdD1ybmEuaW5mZXJuYWxfY2hlY2tlcih6eixjbWZpbGU9Jy4uL3Rvb2xzZGF0YS8lcy5jbScgJSBSRkFNLCBjbXNlYXJjaGJpbmFyeXBhdGg9Jy4uL3Rvb2xzZGF0YS9jbXNlYXJjaCcpCiAgICAgICAgCiAgICAgICAgYSA9IG5wLmFycmF5KHJlc3VsdCkKICAgICAgICBtZWFucy5hcHBlbmQoIG5wLm1lYW4oYSwgYXhpcz0wKSApCiAgICAgICAgc3Rkcy5hcHBlbmQoIG5wLnN0ZChhLCBheGlzPTApICkKICAgIAogICAgbWVhbnMuc29ydCgpCiAgICBzdGRzLnNvcnQoKQogICAgcHJpbnQgJ2V2YWw6OicsIChzaXplLG1lYW5zLHN0ZHMpCiAgICAKICAgIHJldHVybiBbbWVhbnNbMl0qMTAwLHN0ZHNbMl0qMTAwXQogICAgCgoKIyBJbls4XToKCmdldF9pcHl0aG9uKCkucnVuX2NlbGxfbWFnaWModSd0aW1lJywgdScnLCB1J2ltcG9ydCBudW1weSBhcyBucFxuaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdFxuXG5cbmRlZiBtYWtlX2Jhcl9wbG90KGxhYmVscz0oXCdHMVwnLCBcJ0cyXCcsIFwnRzNcJywgXCdHNFwnLCBcJ0c1XCcpLG1lYW5zPSgyMCwgMzUsIDMwLCAzNSwgMjcpLHN0ZHM9KDIsIDMsIDQsIDEsIDIpKTpcbiAgICBOID0gbGVuKGxhYmVscylcbiAgICBpbmQgPSBucC5hcmFuZ2UoTikgXG4gICAgd2lkdGggPSAuNSAjMC4zNVxuICAgIHBsdC5maWd1cmUoZmlnc2l6ZT0oMTQsIDUpKVxuICAgIGF4ID0gcGx0LnN1YnBsb3QoKSBcbiAgICBmb3IgbGFiZWwgaW4gKGF4LmdldF94dGlja2xhYmVscygpICsgYXguZ2V0X3l0aWNrbGFiZWxzKCkpOlxuICAgICAgICBsYWJlbC5zZXRfZm9udG5hbWUoXCdBcmlhbFwnKVxuICAgICAgICBsYWJlbC5zZXRfZm9udHNpemUoMTgpXG4gICAgICAgIFxuICAgIHAxID0gcGx0LmJhcihpbmQsIG1lYW5zLCB3aWR0aCwgY29sb3I9XCcjNjlBQ0VBXCcsIHllcnI9c3RkcyxlZGdlY29sb3I9XCdOb25lXCcsZWNvbG9yPVwnIzQ0NDQ0NFwnKVxuICAgIHBsdC5heGhsaW5lKHk9MzgsIGNvbG9yPVwnYmxhY2tcJyxsaW5ld2lkdGg9MylcbiAgICBwbHQueWxhYmVsKCJsb2cgb2RkcyBzY29yZSIsZm9udHNpemU9MjApXG4gICAgcGx0LnhsYWJlbCgibnVtYmVyIG9mIGdyYXBocyIsZm9udHNpemU9MjApXG4gICAgI3BsdC54bGFiZWwoIm51bWJlciBvZiBncmFwaHMiLGZvbnRzaXplPTIwKVxuICAgIHBsdC50aXRsZShcJ1Njb3JlcyBieSB0cmFpbmluZyBzaXplXCcsZm9udHNpemU9MjApXG4gICAgcGx0Lnh0aWNrcyhpbmQgKyB3aWR0aC8yLCBsYWJlbHMgKVxuICAgIHBsdC55dGlja3MobnAuYXJhbmdlKDAsIDEwMCwgMTApKVxuICAgIHBsdC5zaG93KClcbiAgICBcbnNpemVzPVs1LDEwLDE1LDIwLDI1LDUwXVxuI3NpemVzPVs1LDEwXSAjIGRlYnVnIHNvIHdlIGNhbiBzZWUgdGhlIGRyYXduIGdyYXBocyBvT28gXG4jc2l6ZXM9WzUsMTAsMTUsMjAsMjVdXG5cbnJlcGVhdHM9NVxubWVhbnM9W11cbnN0ZHM9W11cbmZvciBzaXplIGluIHNpemVzOlxuICAgIG0scz1ldmFsKHJlcGVhdHMsc2l6ZSlcbiAgICBtZWFucy5hcHBlbmQobSlcbiAgICBzdGRzLmFwcGVuZChzKVxuICAgIFxuICAgIFxucHJpbnQgXCdzaXplOiBcJyArIHN0cihzaXplcylcbnByaW50IFwnbWVhbnM6IFwnICsgc3RyKG1lYW5zKVxucHJpbnQgXCdzdGRzOiBcJyArIHN0cihzdGRzKVxuXG5tYWtlX2Jhcl9wbG90KHNpemVzLG1lYW5zLHN0ZHMpXG4nKQoKCiMgSW5bOV06CgpzaXplPSBbNSwgMTAsIDE1LCAyMCwgMjUsIDMwXQptZWFucz0gWzU1Ljg3OTE2NjY2NjY2NjY3LCA1My4wMDQ5OTk5OTk5OTk5ODgsIDQ4LjQ5NTk1OTU5NTk1OTU5NywgNDguNTYxOTA0NzYxOTA0NzYzLCA1MC45NTI2MDExNTYwNjkzNjMsIDUzLjg5MzIxMjY2OTY4MzI1MV0Kc3Rkcz0gWzYuNTE3MDI3NjQzNDU0OTE0OCwgNi4yODcyNzM1MjE0MzQ2NTM2LCAxMS44ODE5MzUzNTIyNzA2NTcsIDEyLjQ2NzI5NTk5MzQyODM3MSwgMTEuODYxMTUwMjk0MDMwMTI1LCAxMS4zMDk4NjgzMTcyMjQ2MzZdCnNpemUrPVs1MCwgMTAwLCAyMDAsIDQwMF0KbWVhbnMrPSBbbSoxMDAgZm9yIG0gaW4gWzAuNTI1MzMyMzM1MzI5MzQwNjUsIDAuNTI4MTA4NTE2NDgzNTE2NjQsIDAuNTA1MDExMzI1NzgyODExMTYsIDAuNDgzODAxNjYxMTI5NTZdXQpzdGRzKz0gW3MqMTAwIGZvciBzIGluIFswLjEzNzc2MzkwMTQ2NjM4ODY0LCAwLjEzNTc1ODgzODExMTA4NDgsIDAuMTQ1Mjk1NzAzMDAxNzMxMTcsIDAuMTU0OTc3Njc5ODc1ODQyNF1dCgoKCmRlZiBtYWtlX2Jhcl9wbG90KGxhYmVscz0oJ0cxJywgJ0cyJywgJ0czJywgJ0c0JywgJ0c1JyksbWVhbnM9KDIwLCAzNSwgMzAsIDM1LCAyNyksc3Rkcz0oMiwgMywgNCwgMSwgMikpOgogICAgTiA9IGxlbihsYWJlbHMpCiAgICBpbmQgPSBucC5hcmFuZ2UoTikgCiAgICB3aWR0aCA9IC41ICMwLjM1CiAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDE0LCA1KSkKICAgIGF4ID0gcGx0LnN1YnBsb3QoKSAKICAgIGZvciBsYWJlbCBpbiAoYXguZ2V0X3h0aWNrbGFiZWxzKCkgKyBheC5nZXRfeXRpY2tsYWJlbHMoKSk6CiAgICAgICAgbGFiZWwuc2V0X2ZvbnRuYW1lKCdBcmlhbCcpCiAgICAgICAgbGFiZWwuc2V0X2ZvbnRzaXplKDE4KQogICAgCiAgICBwMSA9IHBsdC5iYXIoaW5kLCBtZWFucywgd2lkdGgsIGNvbG9yPScjRkY3QjdCJywgeWVycj1zdGRzKQogICAgcGx0LmF4aGxpbmUoeT0zOCwgY29sb3I9J2JsYWNrJyxsaW5ld2lkdGg9MykKICAgIHBsdC55bGFiZWwoImxvZyBvZGRzIHNjb3JlIixmb250c2l6ZT0yMCkKICAgIHBsdC54bGFiZWwoIm51bWJlciBvZiBncmFwaHMiLGZvbnRzaXplPTIwKQogICAgI3BsdC54bGFiZWwoIm51bWJlciBvZiBncmFwaHMiLGZvbnRzaXplPTIwKQogICAgcGx0LnRpdGxlKCdTY29yZXMgYnkgdHJhaW5pbmcgc2l6ZScsZm9udHNpemU9MjApCiAgICBwbHQueHRpY2tzKGluZCArIHdpZHRoLzIsIGxhYmVscyApCiAgICBwbHQueXRpY2tzKG5wLmFyYW5nZSgwLCAxMDAsIDEwKSkKICAgIHBsdC5zaG93KCkKICAgIAptYWtlX2Jhcl9wbG90KHNpemUsbWVhbnMsc3RkcykKCgojIEluWzEwXToKCmltcG9ydCBlZGVuCnByaW50IGVkZW4uX19maWxlX18KcHJpbnQgZWRlbi5fX3ZlcnNpb25fXwoKCiMgSW5bMTFdOgoKZ2V0X2lweXRob24oKS5zeXN0ZW0odSdlY2hvICRQWVRIT05QQVRIJykKCgojIEluWzEyXToKCnNpemU9IFs1LCAxMCwgMTUsIDIwLCAyNSwgMzBdCm1lYW5zPSBbNTUuODc5MTY2NjY2NjY2NjcsIDUzLjAwNDk5OTk5OTk5OTk4OCwgNDguNDk1OTU5NTk1OTU5NTk3LCA0OC41NjE5MDQ3NjE5MDQ3NjMsIDUwLjk1MjYwMTE1NjA2OTM2MywgNTMuODkzMjEyNjY5NjgzMjUxXQpzdGRzPSBbNi41MTcwMjc2NDM0NTQ5MTQ4LCA2LjI4NzI3MzUyMTQzNDY1MzYsIDExLjg4MTkzNTM1MjI3MDY1NywgMTIuNDY3Mjk1OTkzNDI4MzcxLCAxMS44NjExNTAyOTQwMzAxMjUsIDExLjMwOTg2ODMxNzIyNDYzNl0Kc2l6ZSs9WzUwLCAxMDAsIDIwMCwgNDAwXQptZWFucys9IFttKjEwMCBmb3IgbSBpbiBbMC41MjUzMzIzMzUzMjkzNDA2NSwgMC41MjgxMDg1MTY0ODM1MTY2NCwgMC41MDUwMTEzMjU3ODI4MTExNiwgMC40ODM4MDE2NjExMjk1Nl1dCnN0ZHMrPSBbcyoxMDAgZm9yIHMgaW4gWzAuMTM3NzYzOTAxNDY2Mzg4NjQsIDAuMTM1NzU4ODM4MTExMDg0OCwgMC4xNDUyOTU3MDMwMDE3MzExNywgMC4xNTQ5Nzc2Nzk4NzU4NDI0XV0KCgoKZGVmIG1ha2VfYmFyX3Bsb3QobGFiZWxzPSgnRzEnLCAnRzInLCAnRzMnLCAnRzQnLCAnRzUnKSxtZWFucz0oMjAsIDM1LCAzMCwgMzUsIDI3KSxzdGRzPSgyLCAzLCA0LCAxLCAyKSk6CiAgICBOID0gbGVuKGxhYmVscykKICAgIGluZCA9IG5wLmFyYW5nZShOKSAKICAgIHdpZHRoID0gLjUgIzAuMzUKICAgIHBsdC5maWd1cmUoZmlnc2l6ZT0oMTQsIDUpKQogICAgYXggPSBwbHQuc3VicGxvdCgpIAogICAgZm9yIGxhYmVsIGluIChheC5nZXRfeHRpY2tsYWJlbHMoKSArIGF4LmdldF95dGlja2xhYmVscygpKToKICAgICAgICBsYWJlbC5zZXRfZm9udG5hbWUoJ0FyaWFsJykKICAgICAgICBsYWJlbC5zZXRfZm9udHNpemUoMTgpCiAgICAKICAgIHAxID0gcGx0LmJhcihpbmQsIG1lYW5zLCB3aWR0aCwgY29sb3I9JyM2OUFDRUEnLCB5ZXJyPXN0ZHMsZWRnZWNvbG9yPSdOb25lJyxlY29sb3I9JyM0NDQ0NDQnKQogICAgcGx0LmF4aGxpbmUoeT0zOCwgY29sb3I9J2JsYWNrJyxsaW5ld2lkdGg9MykKICAgICNheC55YXhpcy5ncmlkKGNvbG9yPSdncmF5JywgbGluZXN0eWxlPSdkYXNoZWQnKQogICAgcGx0LnlsYWJlbCgibG9nIG9kZHMgc2NvcmUiLGZvbnRzaXplPTIwKQogICAgcGx0LnhsYWJlbCgibnVtYmVyIG9mIGdyYXBocyIsZm9udHNpemU9MjApCiAgICAjcGx0LnhsYWJlbCgibnVtYmVyIG9mIGdyYXBocyIsZm9udHNpemU9MjApCiAgICBwbHQudGl0bGUoJ1Njb3JlcyBieSB0cmFpbmluZyBzaXplJyxmb250c2l6ZT0yMCkKICAgIHBsdC54dGlja3MoaW5kICsgd2lkdGgvMiwgbGFiZWxzICkKICAgIHBsdC55dGlja3MobnAuYXJhbmdlKDAsIDEwMCwgMTApKQogICAgcGx0LnNob3coKQogICAgCm1ha2VfYmFyX3Bsb3Qoc2l6ZSxtZWFucyxzdGRzKQoKCiMgSW5bIF06CgoKCg=='
title='bars.ipynb'
git=[('https://github.com/smautner/GraphLearn', '/home/ikea/nips2016/code/deps/GraphLearn/graphlearn', 'f8652753dcf12a2c2b7008a7a3fd520932d0a6cb'), ('https://github.com/smautner/EDeN', '/home/ikea/nips2016/code/deps/EDeN/eden', '3fb68d5b86d1c456dbfdbf7c7a0c537a2983a2fc')]
# write notebookfile
import base64
import os
import subprocess as sp
with open('%s.py' % title, 'w') as f:
    f.write(base64.b64decode(nb))


scripttitle = 'run.%s.sh' % title
startscript=''

# get git
for rem,path,rev in git:
    # make sure that a git folder is there :) 
    gitproject=path.split('/')[-2]
    if not os.path.isdir(gitproject):
        cmd='git clone %s' % rem
        sp.call(cmd,shell=True)

    # do the checkout and add pythonpath 
    path2 = path[:path.rfind('/')]
    startscript+='''
cd %s ; git checkout %s    
cd ..
PYTHONPATH="%s:${PYTHONPATH}"
    '''   % (gitproject, rev, path2)

startscript+='ipython %s.py' % title


# write runscript
with open(scripttitle,'w') as f:
    f.write(startscript)
print 'now run the script via:'
    